#!/bin/bash -e
# Unified setup script for dotfiles (Linux/macOS)

DOTFILES_DIR="$HOME/dotfiles"
INSTALL_DIR="$DOTFILES_DIR/install"

# CI環境検出
if [ -n "$CI" ] || [ -n "$GITHUB_ACTIONS" ]; then
    IS_CI=true
    echo "CI environment detected"
else
    IS_CI=false
fi

# OS検出
OS_TYPE="$(uname -s)"
case "$OS_TYPE" in
Darwin*)
    OS="macos"
    ;;
Linux*)
    OS="linux"
    ;;
*)
    echo "Unsupported OS: $OS_TYPE"
    exit 1
    ;;
esac

echo "==================================="
echo "Dotfiles Setup Script"
echo "OS: $OS"
echo "CI: $IS_CI"
echo "==================================="

# パッケージのインストール
if [ "$OS" = "macos" ]; then
    # Homebrew のインストール
    if ! command -v brew &>/dev/null; then
        if [ "$IS_CI" = true ]; then
            echo "Skipping Homebrew installation in CI (should be pre-installed)"
        else
            echo "Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
    fi

    if command -v brew &>/dev/null; then
        echo "Installing packages via Homebrew..."
        brew install curl git ripgrep tmux fd neovim sheldon universal-ctags lazygit
    fi

elif [ "$OS" = "linux" ]; then
    if [ "$IS_CI" = true ]; then
        echo "Skipping apt update/upgrade in CI"
        echo "Installing packages via apt..."
        sudo apt-get install -y curl git ripgrep build-essential tmux fd-find unzip universal-ctags 2>/dev/null || echo "Some packages may already be installed"
    else
        echo "Updating package list..."
        sudo apt update
        sudo apt upgrade -y

        echo "Installing packages via apt..."
        sudo apt-get install -y curl git ripgrep build-essential tmux fd-find unzip universal-ctags lazygit
    fi
fi

# インストールスクリプトの実行
echo ""
echo "Running installation scripts..."
if [ ! -d "$INSTALL_DIR" ]; then
    echo "Error: $INSTALL_DIR directory does not exist."
    exit 1
fi

for script in "$INSTALL_DIR"/*.sh; do
    if [ -f "$script" ] && [ "$(basename "$script")" != "detect_os.sh" ]; then
        echo ""
        echo "Executing: $(basename "$script")"
        chmod +x "$script"
        bash "$script" || echo "Warning: $(basename "$script") failed, continuing..."
    fi
done

# dotfiles のシンボリックリンクを作成
echo ""
echo "==================================="
echo "Creating dotfile symlinks..."
echo "==================================="

IGNORE_PATTERN="^\.(git|gitmodules)"

link_dotfiles() {
    local src=$1
    local dest=$2

    if [ -d "$src" ]; then
        mkdir -p "$dest"
        for file in "$src"/*; do
            [ -e "$file" ] || continue
            link_dotfiles "$file" "$dest/$(basename "$file")"
        done
    else
        ln -snfv "$src" "$dest"
    fi
}

cd "$DOTFILES_DIR" || exit 1

find . -maxdepth 1 -name ".*" ! -name "." ! -name ".." | while read -r dotfile; do
    basename_dotfile=$(basename "$dotfile")
    [[ $basename_dotfile =~ $IGNORE_PATTERN ]] && continue

    if [[ $dotfile == ".config" ]]; then
        for subdir in "$dotfile"/*; do
            [ -e "$subdir" ] || continue
            link_dotfiles "$(pwd)/$subdir" "$HOME/$dotfile/$(basename "$subdir")"
        done
    else
        link_dotfiles "$(pwd)/$dotfile" "$HOME/$dotfile"
    fi
done

# macOS 固有の設定
if [ "$OS" = "macos" ]; then
    ZSHRC="$HOME/.zshrc"
    CTAGS_LINE="export PATH=\"\$(brew --prefix universal-ctags)/bin:\$PATH\""

    if [ ! -f "$ZSHRC" ]; then
        touch "$ZSHRC"
    fi

    if ! grep -Fxq "$CTAGS_LINE" "$ZSHRC"; then
        {
            echo ""
            echo "# Universal Ctags"
            echo "$CTAGS_LINE"
        } >> "$ZSHRC"
        echo "Added universal-ctags to PATH in .zshrc"
    fi
fi

echo ""
echo "==================================="
echo "Setup Complete!"
echo "==================================="
echo ""
echo "Next steps:"
echo "  1. Reload your shell: exec \$SHELL -l"
echo "  2. Start tmux and press 'prefix + I' to install tmux plugins"
echo ""
